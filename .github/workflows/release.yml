name: Build and Release Executables

on:
  release:
    types: [published]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      PLATFORM: ${{ matrix.os }}
      TAG_NAME: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Set pretty platform name
        id: platform_name
        shell: bash
        run: |
          case "$PLATFORM" in
            windows-latest)
              echo "PLATFORM_NAME=windows" >> $GITHUB_ENV
              echo "EXT=exe" >> $GITHUB_ENV
              ;;
            ubuntu-latest)
              echo "PLATFORM_NAME=linux" >> $GITHUB_ENV
              echo "EXT=tar.gz" >> $GITHUB_ENV
              ;;
            macos-latest)
              echo "PLATFORM_NAME=mac" >> $GITHUB_ENV
              echo "EXT=zip" >> $GITHUB_ENV
              ;;
          esac

      - name: Build and compress executable
        shell: bash
        run: |
          export APP_NAME="pyroddier-${{ env.PLATFORM_NAME }}-${TAG_NAME}"
          pyinstaller src/main.py \
            --noconfirm \
            --clean \
            --name "$APP_NAME" \
            --distpath dist/ \
            --add-data "icons:icons" \
            --windowed \
            --icon=icons/pyroddier_logo.png

          cd dist

          # Limpia archivos temporales
          find . -name '__pycache__' -type d -exec rm -r {} + || true
          find . -name '*.py[co]' -delete || true

          # Comprime segÃºn plataforma
          if [[ "$PLATFORM" == "windows-latest" ]]; then
            # No comprimir, solo subir .exe
            echo "No compression needed for Windows."
          elif [[ "$PLATFORM" == "macos-latest" ]]; then
            zip -r "${APP_NAME}.zip" "${APP_NAME}.app"
            rm -rf "${APP_NAME}.app"
          elif [[ "$PLATFORM" == "ubuntu-latest" ]]; then
            tar -czvf "${APP_NAME}.tar.gz" "${APP_NAME}"
            rm -rf "${APP_NAME}"
          fi

      - name: Upload compressed artifact
        uses: actions/upload-artifact@v4
        with:
          name: "pyroddier-${{ env.PLATFORM_NAME }}-${{ env.TAG_NAME }}"
          path: |
            dist/*.zip
            dist/*.tar.gz
            dist/*.exe
            dist/**/*.exe

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Find built executables
        id: find_assets
        shell: bash
        run: |
          WINDOWS_ASSET=$(find artifacts/ -type f -name "*.exe" | head -n 1)
          MAC_ASSET=$(find artifacts/ -type f -name "*.zip" | head -n 1)
          LINUX_ASSET=$(find artifacts/ -type f -name "*.tar.gz" | head -n 1)

          echo "windows_asset=$WINDOWS_ASSET" >> $GITHUB_OUTPUT
          echo "mac_asset=$MAC_ASSET" >> $GITHUB_OUTPUT
          echo "linux_asset=$LINUX_ASSET" >> $GITHUB_OUTPUT

          echo "### Downloads" > release_notes.md
          if [[ -f "$WINDOWS_ASSET" ]]; then
            echo "- [Windows]($(basename "$WINDOWS_ASSET"))" >> release_notes.md
          fi
          if [[ -f "$MAC_ASSET" ]]; then
            echo "- [macOS]($(basename "$MAC_ASSET"))" >> release_notes.md
          fi
          if [[ -f "$LINUX_ASSET" ]]; then
            echo "- [Linux]($(basename "$LINUX_ASSET"))" >> release_notes.md
          fi

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.find_assets.outputs.windows_asset }}
            ${{ steps.find_assets.outputs.mac_asset }}
            ${{ steps.find_assets.outputs.linux_asset }}
          body_path: release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
